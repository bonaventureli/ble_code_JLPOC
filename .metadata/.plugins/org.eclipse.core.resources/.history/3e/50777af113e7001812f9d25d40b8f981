#ifndef INGEEK_BLE_PROFILE_H
#define INGEEK_BLE_PROFILE_H

#ifdef __cplusplus
extern "C"
{
#endif

/*********************************************************************
 * INCLUDES
 */

/*********************************************************************
 * CONSTANTS
 */

// Profile Parameters
#define DKSERVER_CHAR_STATUS		 0  // R uint8 - Profile Characteristic 0 value
#define DKSERVER_CHAR_INFO			 1  // R uint8 - Profile Characteristic 1 value
#define DKSERVER_CHAR_AUTH			 2  // W uint8 - Profile Characteristic 2 value
#define DKSERVER_CHAR_SESSION		 3  // W uint8 - Profile Characteristic 3 value
#define DKSERVER_CHAR_CMD			 4  // RW uint8 - Profile Characteristic 4 value
#define DKSERVER_CHAR_RSSI			     5  // W uint8 - Profile Characteristic 5 value
#define DKSERVER_CHAR_VERSION       6  // RW uint8 - Profile Characteristic 6 value


// Digital key Service UUID
#define DKSERVER_SERV_UUID          0xFFF0

// Key Pressed UUID
#define DKSERVER_STATUS_UUID           	0xFFF1
#define DKSERVER_INFO_UUID           	0xFFF2
#define DKSERVER_AUTH_UUID           	0xFFF3
#define DKSERVER_SESSION_UUID			0xFFF4
#define DKSERVER_CMD_UUID				0xFFF5
#define DKSERVER_RSSI_UUID				0xFFF6
#define DKSERVER_VERSION_UUID           0xFFF7

// Digital key profile Services bit fields
#define DKSERVER_SERVICE               0x00000001

// Length of info Characteristic in bytes
#define DKSERVER_INFO_LEN           128
// Length of auth Characteristic in bytes
#define DKSERVER_AUTH_LEN          	128
//Length of session Characteristic in bytes
#define DKSERVER_SESSION_LEN       	128
//Length of cmd Characteristic in bytes
#define DKSERVER_CMD_LEN         	20
//Length of rssi Characteristic in bytes
#define DKSERVER_RSSI_LEN        	128
//Length of version Characteristic in bytes
#define DKSERVER_VER_LEN            17
/////////////////////////////
#define SERVAPP_NUM_ATTR_SUPPORTED             28//25  //22
extern gattAttribute_t DKServiceAttrTbl[SERVAPP_NUM_ATTR_SUPPORTED];
extern uint8 DigitalkeyServicesession[DKSERVER_SESSION_LEN];
extern uint8 DigitalkeyServiceinfo[DKSERVER_INFO_LEN];
/*********************************************************************
 * TYPEDEFS
 */


/*********************************************************************
 * MACROS
 */

/*********************************************************************
 * Profile Callbacks
 */

// Callback when a characteristic value has changed
typedef void (*DigitalkeyServiceChange_t)( uint8 paramID );

typedef struct
{
  DigitalkeyServiceChange_t        pfnDigitalkeyServiceChange;  // Called when characteristic value changes
} DigitalkeyServiceCBs_t;


/*********************************************************************
 * API FUNCTIONS
 ********************************************************************/

/*
 * DigitalkeyService_AddService- Initializes the Serial Port Profile service by registering
 *          GATT attributes with the GATT server.
 *
 * @param   services - services to add. This is a bit map and can
 *                     contain more than one service.
 */

extern bStatus_t DigitalkeyService_AddService( uint32 services );

/*
 * DigitalkeyService_RegisterAppCBs - Registers the application callback function.
 *                    Only call this function once.
 *
 *    appCallbacks - pointer to application callbacks.
 */
extern bStatus_t DigitalkeyService_RegisterAppCBs( DigitalkeyServiceCBs_t *appCallbacks );

/*
 * DigitalkeyService_SetParameter - Set a Serial Port Profile parameter.
 *
 *    param - Profile parameter ID
 *    len - length of data to right
 *    value - pointer to data to write.  This is dependent on
 *          the parameter ID and WILL be cast to the appropriate
 *          data type (example: data type of uint16 will be cast to
 *          uint16 pointer).
 */
extern bStatus_t DigitalkeyService_SetParameter( uint8 param, void *value,uint32_t len);

/*
 * DigitalkeyService_GetParameter - Get a Serial Port Profile parameter.
 *
 *    param - Profile parameter ID
 *    value - pointer to data to write.  This is dependent on
 *          the parameter ID and WILL be cast to the appropriate
 *          data type (example: data type of uint16 will be cast to
 *          uint16 pointer).
 */
extern bStatus_t DigitalkeyService_GetParameter( uint8 param, void *value,uint32_t *returnBytes );

extern void  Characteristic_zeroize(uint8_t paramID);
/*********************************************************************
*********************************************************************/

#ifdef __cplusplus
}
#endif

#endif /* INGEEK_BLE_PROFILE_H */
